PWA

Por que conteúdos dinâmicos como as imagens dos cartões, que mudam pra cada usuário, são complicado para armazenar com o AppCache?

Pois o manifest é o mesmo para todos os usuários da app em todo o mundo e teríamos que servir um arquivo de manifest diferente 
para cada usuário já que arquivos de imagens diferentes teriam que ser listados na seção CACHE do manifest.

O App Cache não consegue adicionar arquivos ao cache que não estejam listados no manifest. Isso significa que previamente 
precisamos saber todos os arquivos que serão cacheados para cada usuário para listá-los no manifest. 
Isso que exige código no servidor para gerar esse arquivo. Ou seja, só com tecnologia front-end, não conseguimos 
adicionar arquivos dinamicamente no App Cache.

Sobre a API Cache Storage é correto dizer que:


As instruções para abrir um cache caches.open e adicionar um arquivo ao cache cache.put são assíncronas e por isso o valor retornado por ambas é uma Promise.
 
Uma Promise é uma forma de representar informações que só são acessíveis de forma assíncrona. Como elas fazem parte da linguagem javascript, as novas APIs que precisam lidar com dados assíncronos fazem forte uso das promises.
Alternativa correta
caches é o nome da variável que é a porta de entrada para o Cache Storage
 
Todas as funções da API Cache Storage se encontram dentro da variável caches
Alternativa correta
Ela armazena não só o conteúdo do arquivo, mas toda a resposta que o servidor daquele arquivo enviou, incluindo todos os cabeçalhos do HTTP.
 
O que salvamos na verdade é mais do que o conteúdo do arquivo. Armazenamos toda a resposta que o servidor enviou. Com a resposta inteira do servidor em mãos podemos futuramente simular que a resposta veio do servidor quando na verdade veio do Cache Storage. Esta aí um dos poderes do Cache Storage que utilizaremos nas próximas aulas.
Alternativa correta
O Cache Storage organiza os arquivos cacheados em vários caches que sempre devem ter um nome
 
Para armazenar qualquer arquivo no Cache Storage é necessário abrir ou criar um cache com a instrução caches.open("nome do cache") pois todo arquivo cacheado deve ser colocado cache.




Para que alterações em nossos arquivos sejam carregadas no Application Cache, o que deve ser feito?
O arquivo de manifest precisa ser alterado de alguma maneira, mesmo que não adicionemos nenhum arquivo
 novo.
 
O App Cache só será novamente carregado se o arquivo de manifest sofrer alguma alteração. 
Se nós apenas modificamos o conteúdo de um arquivo que já estava listado no manifest, 
precisamos de alguma forma alterar esse arquivo de manifest. Um método muito usual é 
adicionar um comentário no formato #numero indicando uma versão do App Cache. Sempre que quisermos 
atualizar o cache, podemos aumentar o numero dessa versão no comentário.

Após abrir o cache de imagens, como é possível procurarmos e recuperarmos uma ou mais repostas de arquivos que estavam dentro dele?
Alternativa correta
É possível com a função cache.match.
 
As funções cache.match e cache.matchAll são as responsáveis por procurar e recuperar as respostas de arquivos.
Alternativa correta
É possível com a função cache.matchAll.
 
As funções cache.match e cache.matchAll são as responsáveis por procurar e recuperar as respostas de arquivos.


Como podemos fazer um Service Worker rodar?
É necessário registrar o Service Worker através da função navigator.serviceWorker.register.
 
Um Service Worker é o mesmo para todas as abas que tiverem a app aberta. 
Não temos um Service Worker por aba, ele roda em paralelo com nossa app. Por isso, 
é preciso registrar um Service Worker e não carregar ele a todo momento numa tag <script>.
 Para registrar usamos a função navigator.serviceWorker.register.


 Como o Service Worker nos permite interceptar os pedidos de arquivos que o navegador faz e acessar suas informações?

 É possível acessar as informação do pedido feito pelo navegador através da propriedade event.request.
 
Dentro do evento de fetch, podemos obter as informações do pedido através do parâmetro que recebemos no Event Listener. O parâmetro é comumente chamado de event e é possível acessar todas as informações pelaa sua propriedade request.

É possível ouvir o evento de 'fetch'.
 
É possível executar um código sempre que o navegador pede algum arquivo. Basta transfomar esse código numa função e adicioná-la como um Event Listener do evento fetch.


Após alterarmos o arquivo de um Service Worker e recarregarmos nossa app no navegador é possível ver que o Service Worker novo foi instalado. Depois da instalação, o que acontece com os Service Workers?
Alternativa correta
O Service Worker mais novo é instalado, porém permanece desativado (sem uso) até que todas as abas do navegador que estejam abertas na app sejam fechadas.
 
Todo Service Worker é instalado automaticamente quando seu arquivo é atualizado. Porém, a versão nova permanece desativada (sem uso) até que todas as abas do navegador que estejam abertas na app sejam fechadas. Quem decide quando um Service Worker será ativado é ou o navegador ou o desenvolvedor (é possível por exemplo, ativar um Service Worker pelo Developer Tools). Um mesmo Service Worker só terá uma versão ativada ao mesmo tempo.




Todas as respostas de arquivos que nossa app pede vêm do Service Worker, pois estamos ouvindo o evento fetch e executando a função event.respondWith. O que acontece se nesse evento nós apenas respondermos com o que acharmos no Cache Storage?

As respostas de arquivos que não forem encontradas no Cache Storage serão dadas como vazias, ou seja, esses arquivos pedidos e não cacheados não serão carregados.
 
Se uma resposta de arquivo não é achada no Cache Storage, teremos uma resposta vazia e nada de erros. No nosso caso que temos apenas cache de imagens, qualquer outro arquivo não será encontrado, e para o browser não poderá ser carregado.



04) Porque nossa app não funcionava mais offline mesmo com o Application Cache totalmente configurado?
Pois os Service Workers juntamente com o Cache Storage substituem totalmente o Application Cache.
 
O poder dos Service Workers em conjunto com o Cache Storage permite fazer muito mais coisas em relação ao Application Cache. O Application Cache é automaticamente desativado quando um Service Worker é registrado.

05) Como os Service Workers permitirão que nossa app funcione offline?
Com o Service Worker será possível dizer ao navegador quando ele deve pegar as informações do Cache Storage e quando ele deve pegar da rede ou do servidor.
 
Um dos poderes de um Service Worker é poder interceptar todos os pedidos/requests que o navegador fizer. Com esse poder podemos dizer para o navegador usar as respostas que já armazenamos no Cache Storage ao invés de se conectar na rede e pedir a resposta para um servidor.

Poderemos baixar os arquivos da app no Cache Storage durante o processo de instalação do Service Worker.
 
Dentro de um Service Worker temos acesso à uma API poderosa, acessar o Cache Storage no processo de instalação permitirá baixarmos todos os arquivos que precisamos na primeira vez que abrimos a app.

06) Agora que guardamos todas as respostas de arquivos no Cache Storage, começamos a organizar os caches por nomes. Temos o cache ceep-imagens e o cache ceep-arquivos. Como podemos buscar uma resposta em ambos os caches de uma só vez?
É possível utilizando a função caches.match.
 
Se a busca por respostas de arquivos não for específica para um cache, podemos utilizar a função caches.match que irá procurar em todos os caches.


